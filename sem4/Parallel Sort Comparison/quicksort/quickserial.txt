#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>
#include <string.h>

#define DNUM 100000000

void swap(int lyst[], int i, int j)
{
	int temp = lyst[i];
	lyst[i] = lyst[j];
	lyst[j] = temp;
}

int partition(int lyst[], int lo, int hi)
{
	int b = lo;
	int r = (int) (lo + (hi-lo + 1)*(1.0*rand()/RAND_MAX));
	int pivot = lyst[r];
	swap(lyst, r, hi);
	for (int i = lo; i < hi; i ++)
	{
		if (lyst[i] < pivot)
		{
			swap(lyst, i, b);
			b ++;
		}
	}
	swap(lyst, hi, b);
	return b;
}

void quicksortHelper(int lyst[], int lo, int hi)
{
	if (lo >= hi) return;
	int b = partition(lyst, lo, hi);
	quicksortHelper(lyst, lo, b-1);
	quicksortHelper(lyst, b+1, hi);
}
int *arr;
int isSorted(int lyst[], int size)
{
	for (int i = 1; i < size; i ++)
	{
		if (lyst[i] < lyst[i-1]) 
		{
			printf("Array incorrectly sorted\n");
			free(arr);		
			exit(0);
		}
	}
	return 1;
}

int main()
{
clock_t t1,t2;
printf("%10s %10s\n\n","SIZE","TIME");
for(int l=1024;l<=DNUM;l*=2)
{
arr=(int*)malloc(l*sizeof(int));
for(int i = 0; i < l; i ++)
{
arr[i] = rand()%100000000+0;
//arr[i] = 1.0*rand()/RAND_MAX;
}

t1=clock();
quicksortHelper(arr,0,l-1);
t2=clock();
isSorted(arr,l);
free(arr);
printf("%10f\n",(t2-t1)/(double)CLOCKS_PER_SEC);
}
}
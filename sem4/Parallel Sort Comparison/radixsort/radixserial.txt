#include<time.h>
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#define BITS 29
#define SIZE1 10000000
// A utility function to get maximum value in arr[]
int getMax(int arr[], int n)
{
	int mx = arr[0];
	for (int i = 1; i < n; i++)
		if (arr[i] > mx)
			mx = arr[i];
	return mx;
}

// A function to do counting sort of arr[] according to
// the digit represented by exp.
void countSort(int arr[], int n, int exp)
{
	int *output=(int*)malloc(SIZE1*sizeof(int)); // output array
	int i, count[10] = { 0 };

	// Store count of occurrences in count[]
	for (i = 0; i < n; i++)
		count[(arr[i] / exp) % 10]++;

	// Change count[i] so that count[i] now contains actual
	// position of this digit in output[]
	for (i = 1; i < 10; i++)
		count[i] += count[i - 1];

	// Build the output array
	for (i = n - 1; i >= 0; i--) {
		output[count[(arr[i] / exp) % 10] - 1] = arr[i];
		count[(arr[i] / exp) % 10]--;
	}

	// Copy the output array to arr[], so that arr[] now
	// contains sorted numbers according to current digit
	for (i = 0; i < n; i++)
		arr[i] = output[i];
	free(output);
}

// The main function to that sorts arr[] of size n using
// Radix Sort
void radixsort(int arr[], int n)
{
	// Find the maximum number to know number of digits
	int m = getMax(arr, n);

	// Do counting sort for every digit. Note that instead
	// of passing digit number, exp is passed. exp is 10^i
	// where i is current digit number
	for (int exp = 1; m / exp > 0; exp *= 10)
		countSort(arr, n, exp);
}

// A utility function to print an array
void print(int arr[], int n)
{
	for (int i = 0; i < n; i++)
		printf("%d ",arr[i]);
}

// Driver Code
int main()
{
	clock_t t1,t2;
	int *arr=(int*)malloc(SIZE1*sizeof(int));
	srand(time(0));
	for(int i=0;i<SIZE1;i++)
	{
		arr[i]=rand()%SIZE1;
	}
	// Function Call
	t1=clock();
	radixsort(arr, SIZE1);
	t2=clock();
	//print(arr, n);
	free(arr);
	printf("Time taken to sort %d elements: %fs \n",SIZE1,(t2-t1)/(double)CLOCKS_PER_SEC);	
	return 0;
}
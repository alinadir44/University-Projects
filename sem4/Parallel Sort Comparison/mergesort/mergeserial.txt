/* C program for Merge Sort */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX 100000000
// Merges two subarrays of arr[].
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]

//static int arr[MAX];

void merge(int *arr, int l, int m, int r)
{
	int i, j, k;
	int n1 = m - l + 1;
	int n2 = r - m;

	/* create temp arrays */
	int *L, *R;
	L=(int*)malloc(n1*sizeof(int));
	R=(int*)malloc(n2*sizeof(int));
	
	/* Copy data to temp arrays L[] and R[] */
	for (i = 0; i < n1; i++)
		L[i] = arr[l + i];
	for (j = 0; j < n2; j++)
		R[j] = arr[m + 1 + j];

	/* Merge the temp arrays back into arr[l..r]*/
	i = 0; // Initial index of first subarray
	j = 0; // Initial index of second subarray
	k = l; // Initial index of merged subarray
	while (i < n1 && j < n2) {
		if (L[i] <= R[j]) {
			arr[k] = L[i];
			i++;
		}
		else {
			arr[k] = R[j];
			j++;
		}
		k++;
	}

	/* Copy the remaining elements of L[], if there
	are any */
	while (i < n1) {
		arr[k] = L[i];
		i++;
		k++;
	}

	/* Copy the remaining elements of R[], if there
	are any */
	while (j < n2) {
		arr[k] = R[j];
		j++;
		k++;
	}
free(L);free(R);
}

/* l is for left index and r is right index of the
sub-array of arr to be sorted */
void mergeSort(int *arr, int l, int r)
{
	if (l < r) {
		// Same as (l+r)/2, but avoids overflow for
		// large l and h
		int m = l + (r - l) / 2;

		// Sort first and second halves
		mergeSort(arr, l, m);
		mergeSort(arr, m + 1, r);

		merge(arr, l, m, r);
	}
}

/* UTILITY FUNCTIONS */
/* Function to print an array */
void printArray(int *A, int size)
{
	int i;
	for (i = 0; i < size; i++)
		printf("%d ", A[i]);
	printf("\n");
}

void test_array_is_in_order(int arr[],int n) {
    for (int i = 0; i < n-1; i ++) {
        if (arr[i] > arr[i + 1]) {
            printf("Error. Out of order sequence: %d found at index %d\n", arr[i],i);
            return;
        }
    }
    printf("Array is in sorted order\n");
}

/* Driver code */
int main()
{
	srand(time(0));
	printf("%10s | %10s\n\n","SIZE","TIME");
	for(int l=1024;l<MAX;l*=2)
{
	int *arr=(int*)malloc(l*sizeof(int));
	for(int i=0;i<l;i++)
	{
		arr[i]=(rand()%10000)+1;
	}
	clock_t t1,t2;
	t1=clock();
	mergeSort(arr, 0, l - 1);
	t2=clock();
	//printf("\nSorted array is \n");
	//printArray(arr, MAX);
	test_array_is_in_order(arr,l);
	free(arr);
	printf("%10d %10f\n",l,(t2-t1)/(double)CLOCKS_PER_SEC);
}
return 0;
}

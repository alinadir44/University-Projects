#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <sys/time.h>

/* define variables for the problem */
#define SEED  100
#define LENGTH 100000000
#define UPPER_LIM 10000
#define LOWER_LIM  1
#define NUM_THREADS 4

/* define derived values from the variables */
int *arr;
int NUMBERS_PER_THREAD,OFFSET;
/* function definitions */
int generate_random_number(unsigned int lower_limit, unsigned int upper_limit);
void merge_sort(int arr[], int left, int right);
void merge(int arr[], int left, int middle, int right);
void* thread_merge_sort(void* arg);
void merge_sections_of_array(int arr[], int number, int aggregation,int l);
void test_array_is_in_order(int arr[],int n);

int main(int argc, const char * argv[]) {
    printf("%10s\n\n","TIME");
	for(int l=1024;l<LENGTH;l*=2)
{
    NUMBERS_PER_THREAD = l / NUM_THREADS;
    OFFSET = l % NUM_THREADS;
    arr=(int*)malloc(l*sizeof(int));
    srand(SEED);
    struct timeval  start, end;
    double time_spent;
    
    /* initialize array with random numbers */
    for (int i = 0; i < l; i ++) {
        arr[i] = generate_random_number(LOWER_LIM, UPPER_LIM);
    }
    
    /* begin timing */
    pthread_t threads[NUM_THREADS];
    gettimeofday(&start, NULL);
    
    /* create threads */
    for (long i = 0; i < NUM_THREADS; i ++) {
        int rc = pthread_create(&threads[i], NULL, thread_merge_sort, (void *)i);
        if (rc){
            printf("ERROR; return code from pthread_create() is %d\n", rc);
            exit(-1);
        }
    }
    
    for(long i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    merge_sections_of_array(arr, NUM_THREADS, 1,l);
    
    /* end timing */
    gettimeofday(&end, NULL);
    time_spent = ((double) ((double) (end.tv_usec - start.tv_usec) / 1000000 +
                            (double) (end.tv_sec - start.tv_sec)));
    test_array_is_in_order(arr,l);
    printf("%10f\n",time_spent);    
     //printf("Time taken for execution: %f seconds\n", time_spent);
    /* test to ensure that the array is in sorted order */
    free(arr);
}
    return 0;
}

/* generate random numbers within the specified limit */
int generate_random_number(unsigned int lower_limit, unsigned int upper_limit) {
    return lower_limit + (upper_limit - lower_limit) * ((double)rand() / RAND_MAX);
}

/* merge locally sorted sections */
void merge_sections_of_array(int arr[], int number, int aggregation,int l) {
    for(int i = 0; i < number; i = i + 2) {
        int left = i * (NUMBERS_PER_THREAD * aggregation);
        int right = ((i + 2) * NUMBERS_PER_THREAD * aggregation) - 1;
        int middle = left + (NUMBERS_PER_THREAD * aggregation) - 1;
        if (right >= l) {
            right = l - 1;
        }
        merge(arr, left, middle, right);
    }
    if (number / 2 >= 1) {
        merge_sections_of_array(arr, number / 2, aggregation * 2,l);
    }
}

/** assigns work to each thread to perform merge sort */
void *thread_merge_sort(void* arg)
{
    int thread_id = (long)arg;
    int left = thread_id * (NUMBERS_PER_THREAD);
    int right = (thread_id + 1) * (NUMBERS_PER_THREAD) - 1;
    if (thread_id == NUM_THREADS - 1) {
        right += OFFSET;
    }
    int middle = left + (right - left) / 2;
    if (left < right) {
        merge_sort(arr, left, right);
        merge_sort(arr, left + 1, right);
        merge(arr, left, middle, right);
    }
    return NULL;
}

/* test to ensure that the array is in sorted order */
void test_array_is_in_order(int arr[],int n) {
    int max = 0;
    for (int i = 1; i <n; i ++) {
        if (arr[i] >= arr[i - 1]) {
            max = arr[i];
        } else {
            printf("Error. Out of order sequence: %d found\n", arr[i]);
            return;
        }
    }
}

/* perform merge sort */
void merge_sort(int arr[], int left, int right) {
    if (left < right) {
        int middle = left + (right - left) / 2;
        merge_sort(arr, left, middle);
        merge_sort(arr, middle + 1, right);
        merge(arr, left, middle, right);
    }
}

/* merge function */
void merge(int arr[], int left, int middle, int right) {
    int i = 0;
    int j = 0;
    int k = 0;
    int left_length = middle - left + 1;
    int right_length = right - middle;
    int *left_array=(int*)malloc(left_length*sizeof(int));
    int *right_array=(int*)malloc(right_length*sizeof(int));
    
    /* copy values to left array */
    for (int i = 0; i < left_length; i ++) {
        left_array[i] = arr[left + i];
    }
    
    /* copy values to right array */
    for (int j = 0; j < right_length; j ++) {
        right_array[j] = arr[middle + 1 + j];
    }
    
    i = 0;
    j = 0;
    /** chose from right and left arrays and copy */
    while (i < left_length && j < right_length) {
        if (left_array[i] <= right_array[j]) {
            arr[left + k] = left_array[i];
            i ++;
        } else {
            arr[left + k] = right_array[j];
            j ++;
        }
        k ++;
    }
    
    /* copy the remaining values to the array */
    while (i < left_length) {
        arr[left + k] = left_array[i];
        k ++;
        i ++;
    }
    while (j < right_length) {
        arr[left + k] = right_array[j];
        k ++;
        j ++;
    }
    free(left_array);
    free(right_array);
}